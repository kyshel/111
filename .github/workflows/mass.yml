# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Mass Testing 

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.7
      uses: actions/setup-python@v2
      with:
        python-version: 3.7
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Declare some variables
      id: vars
      shell: bash
      run: |
        echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
        
    - name: wandb login 
      run: |
        wandb login ${{ secrets.WANDB }}
      
    - name: train.py --project --name 
      run: |
        echo ${git_hash}123123
        python train.py --project ich_ci --name ${{ steps.vars.outputs.sha_short }}_raw 
        
    - name: train.py --cache
      run: |
        python train.py --project ich_ci --cache cache.pkl --name ${{ steps.vars.outputs.sha_short }}_cache
        
    
    - name: train.py --kfold
      run: |
        python train.py --project ich_ci --cache cache.pkl --repro --kfold 2/5 --name ${{ steps.vars.outputs.sha_short }}_kfold
        python train.py --project ich_ci --cache cache.pkl --repro --skfold 3/5 --name ${{ steps.vars.outputs.sha_short }}_skfold
        
    - name: train.py --repro  # repro at the end to ensure all args worked
      run: |
        python train.py --project ich_ci --cache cache.pkl --repro --skfold 4/5 --name ${{ steps.vars.outputs.sha_short }}_repro1
        python train.py --project ich_ci --cache cache.pkl --repro --skfold 4/5 --name ${{ steps.vars.outputs.sha_short }}_repro2
        
        
    - name: train.py --task tset
      run: |
        python train.py --project ich_ci --cache cache.pkl \
        --task test --weights ich_ci/${{ steps.vars.outputs.sha_short }}_skfold/best.strip.pt \
        --name ${{ steps.vars.outputs.sha_short }}_kfold
        
      
        
